# install.packages("rJava")
# install.packages("UpSetR")
# install.packages("tidyverse")
# install.packages("venneuler")
# install.packages("grid")



library(dplyr)
library(rJava)
library(UpSetR)
library(tidyverse)
library(venneuler)
library(grid)



rawSets <- read.csv(
  file = "https://raw.githubusercontent.com/lgellis/MiscTutorial/master/sets/seniorTransportation.csv",
  header = TRUE, sep = ",", stringsAsFactors = FALSE
)




rawSets[is.na(rawSets)] <- 0

# Rename the columns for easier display
sets <- rawSets %>%
  rename(TTC = ttcTransportation, Walk = walkTransportation, Drive = driveTransportation, Cycle = cycleTransportation, Taxi = taxiTransportation, `Community Ride` = communityRideTransportation, `Wheel Trans` = wheelTransTransportation, Friends = friendsTransportation)


# Prep the data for a Venn diagram
vennSets <- sets %>%
  gather(transportation, binary,6:13) %>% # take all binary mappings and convert to be a the set indicator
  filter(binary == 1) %>% # only include set matches
  select(ID, transportation) %>% # only include ID and set category
  mutate(transportation = factor(transportation)) # set the transportation column as a factor


v <- venneuler(data.frame(vennSets))

#Note that if you need to move around the labels so that they are not overlapping, you can use the new line breaks like the example below.
#v$labels <- c("TTC", "Walk", "Drive", "Cycle\n\n\n", "\nTaxi", "Community Ride", "Wheel Trans", "Friends")

par(cex = 0.7) 
plot(v, main = "Modes of Senior Transportation (Toronto 2017 Survey)", cex.main = 1.5)
grid.text(
  "@littlemissdata",
  x = 0.52,
  y = 0.15,
  gp = gpar(
    fontsize = 10,
    fontface = 3
  )
)


 # 
  # Create an UpSet Plot
  # 
  # Create an UpSet plot by passing the original binary matrix into the upset() function.  You can specify a number of parameters as outlined by this very clear vignette, but it also works very well outside of the box.  Other than the upset() function, the rest of the code is for labels and formatting. 
  # 


#----- Version - 1 
  
 upset(sets,
        nsets = 10, number.angles = 30, point.size = 3.5, line.size = 2,
        mainbar.y.label = "Modes of Senior Transportation (Toronto 2017 Survey)", sets.x.label = "Total Participants"
  )
  grid.text(
    "datascientist_@outlook.com",
    x = 0.90,
    y = 0.05,
    gp = gpar(
      fontsize = 10,
      fontface = 3
    )
  )

#----- Version - 2

  upset(sets,
        nsets = 10, number.angles = 30, point.size = 3.5, line.size = 2,
        mainbar.y.label = "Modes of Senior Transportation (Toronto 2017 Survey)", sets.x.label = "Total Participants"
  )
  grid.text(
    "datascientist_@outlook.com",
    x = 0.90,
    y = 0.02,
    gp = gpar(
      fontsize = 7,
      fontface = 3
    )
  )



  
  # -------- Highlight 
  
  upset(sets,
        query.legend = "bottom", nsets = 10, number.angles = 30, point.size = 3.5, line.size = 2,
        mainbar.y.label = "Modes of Senior Transportation (Toronto 2017 Survey)", sets.x.label = "Total Participants", 
        queries = list(
          list(
            query = intersects,
            params = list("Cycle", "Walk"), 
            color = "#Df5286", 
            active = T,
            query.name = "Physically Active Transportation"
          )
        )
  )
  grid.text(
    "datascientist_@outlook.com",
    x = 0.90,
    y = 0.05,
    gp = gpar(
      fontsize = 7,
      fontface = 1.5
    )
  )

# --------------- 
  
  # Provide Context with Additional Graphs Called "Attribute Plots"
  # 
  # Beyond highlighting within the UpSet main graph, we also have the option of bringing in additional plots which can display information about other variables within the context of the sets.  
  # 
  # Display an in context box plot of age for each set using boxplot.summary() function 
  # 
  # In our next example, we are looking to display a boxplot of the minimumAgeRange for every single set.  We can do this very easily by just passing in the boxplot.summary parameter with the variable that we would like to summarize.  
  # 
  
  upset(sets,
        query.legend = "bottom", nsets = 10, number.angles = 30, point.size = 3.5, line.size = 2,  
        queries = list(
          list(
            query = elements,
            params = list("physicalActivityPerMonth", 0,4),
            color = "#Df5286", 
            active = T,
            query.name = "Physically Active 1x/Week or Less"
          )
        ), 
        boxplot.summary = c("minAgeRange")
  )
  grid.text(
    "datascientist_@outlook.com",
    x = 0.90,
    y = 0.05,
    gp = gpar(
      fontsize = 7,
      fontface = 1.5
    )
  )


